// #pragma kernel StampContourDetectPathLoops_UpSweep
// #pragma kernel StampContourDetectPathLoops_Reduce
// #pragma kernel StampContourDetectPathLoops_DwSweep
//
// #pragma use_dxc
// #include "../ShaderLibrary/ComputeKernelConfigs/StampContourDetectPathLoopsComputeDefs.hlsl"
//
// // #define DEBUG_UPSWEEP 
// #define DEBUG_DWSWEEP
// uint _FrameCounter;
// uint _BeforeMerge;
//
// ByteAddressBuffer CBuffer_BufferRawStampLinkage;
// ByteAddressBuffer CBuffer_BufferRawStampPixels;
// ByteAddressBuffer CBuffer_BufferRawProceduralGeometry;
// RWByteAddressBuffer CBuffer_BufferRawPixelEdgeData;
//
// StructuredBuffer<uint> CBuffer_CachedArgs;
// StructuredBuffer<uint> CBuffer_CachedArgs1;
//
// RWByteAddressBuffer CBuffer_BufferRawDebug;
// RWTexture2D<float4> _DebugTexture;
// RWTexture2D<float4> _DebugTexture1;
//
//
// #define EdgeId (id.x)
//
// uint LoadStrokeRank(uint edgeId)
// {
// 	return CBuffer_BufferRawPixelEdgeData.Load(
// 		CBuffer_PixelEdgeData_EdgeParam_AddrAt(
// 			EDGE_PARAM_PREDICT, // TODO: change to variable input parameter
// 			edgeId
// 		)
// 	); // Only rank is needed. Stroke length(.y) is omitted for I/O efficiency
// }
//
// uint LoadPathRank(uint edgeId/*, out uint invalidPathRankPacked*/)
// {
// 	return CBuffer_PixelEdgeData_EdgeParam_LoadSegRank(
// 		CBuffer_BufferRawPixelEdgeData,
// 		EDGE_PARAM_BRUSH_PATH,
// 		edgeId
// 	);
// }
//
//
// void LoadLastFramePathRankCoarse(
// 	uint edgeId, uint historyPtr,
// 	out float rankTC, out float rankStable, out bool valid)
// {
// 	float pathRank = asfloat(CBuffer_BufferRawProceduralGeometry.Load(
// 		CBuffer_RPJ_PathRank_AddrAt(DecodeRPJSampleID(historyPtr))
// 	));
// 	rankStable = asfloat(CBuffer_BufferRawProceduralGeometry.Load(
// 		CBuffer_RPJ_PathRankII_AddrAt(DecodeRPJSampleID(historyPtr))
// 	));
//
// 	// TODO: Compress this bit somewhere else, this is too expensive
// 	uint vote = CBuffer_BufferRawPixelEdgeData.Load(
// 		CBuffer_PixelEdgeData_LastFramePathVote_AddrAt(edgeId)
// 	);
//
// 	valid = ValidRPJSample(historyPtr) && (isPathVoteHit(vote));
// 	rankStable = valid ? rankStable : 0;
//
// 	rankTC = valid ? pathRank : 0;
// }
//
// float LoadHistoryStability(uint historyPtr)
// {
// 	return asfloat(CBuffer_BufferRawProceduralGeometry.Load(
// 		CBuffer_RPJ_Stability_AddrAt(DecodeRPJSampleID(historyPtr))
// 	));
// }
//
// uint LoadHistorySampleAttrs(uint edgeId)
// {
// 	uint samplePtr = CBuffer_BufferRawPixelEdgeData.Load(
// 		CBuffer_PixelEdgeData_LastFrameSamplePtr_AddrAt(edgeId)
// 	);
// 	return samplePtr;
// }
//
// #define NUM_SCAN_BLOCKS_MAX 2048
// uint ComputeGlobalScanBufferOffset(uint scanItemCount)
// {
// 	return
// 		(scanItemCount << BITS_BLOCK_OFFSET) +	// float4 data
// 		(scanItemCount << BITS_WORD_OFFSET) +	// uint hf
// 		(scanItemCount << BITS_BLOCK_OFFSET);	// extra spacing for safety
// }
// uint ComputeReductionBufferOffset()
// {
// 	return
// 		(NUM_SCAN_BLOCKS_MAX << BITS_BLOCK_OFFSET) + // data
// 		(NUM_SCAN_BLOCKS_MAX << BITS_WORD_OFFSET) + // hf
// 		(NUM_SCAN_BLOCKS_MAX << BITS_WORD_OFFSET);	// extra
// }
//
//
// #undef EdgeId
// #define TID (id.x)
// [numthreads(GROUP_SIZE_0, 1, 1)]
// void StampContourDetectPathLoops_UpSweep(
// 	uint3 id : SV_DispatchThreadID,
// 	uint groupIdx : SV_GroupIndex,
// 	uint3 gIdx : SV_GroupID)
// {
// 	const uint EdgeCount = CBuffer_CachedArgs_PixelEdgeCounter;
//
// 	uint EdgeId = CBuffer_BufferRawPixelEdgeData.Load(
// 		CBuffer_PixelEdgeData_EdgeTemp2_AddrAt(TID)
// 	);
// 	bool validThread = (TID < EdgeCount&& EdgeId < EdgeCount);
//
// 	uint historySampleAttrs = LoadHistorySampleAttrs(EdgeId);
// 	float historyRankRange = (float)GetRPJSampleAttrib(
// 		BIT_BEG_RANK_RANGE, BIT_LEN_RANK_RANGE,
// 		historySampleAttrs
// 	);
//
// 	uint pathRank = LoadPathRank(EdgeId);
// 	bool hf = validThread && (pathRank == 0);
//
// 	uint historyPtr = CBuffer_BufferRawPixelEdgeData.Load(
// 		CBuffer_PixelEdgeData_LastFrameSamplePtr_AddrAt(EdgeId)
// 	);
// 	bool validPathHistory = false;
// 	float stableRankCoarse = 0;
// 	float historyRankCoarse = 0;
// 	LoadLastFramePathRankCoarse(
// 		EdgeId, historyPtr,
// 		// - out -
// 		historyRankCoarse, stableRankCoarse,
// 		validPathHistory
// 		// -------
// 	);
// 	historyRankCoarse -= historyRankRange * .5f;
// 	stableRankCoarse -= historyRankRange * .5f;
//
// 	validPathHistory = validPathHistory && validThread;
//
// 	float4 scanData = 0;
//
// 	scanData = float4(
// 		pathRank, validPathHistory ? historyRankCoarse : MAX_F32,
// 		pathRank, validPathHistory ? stableRankCoarse : MAX_F32
// 	);
// 	SegScanInc_UpSweep_CircularResolve(
// 		id, groupIdx, gIdx,
// 		LS_SCAN_BUFFER,
// 		CBuffer_BufferRawLookBacks,
// 		scanData,
// 		hf,
// 		0, 0,
// 		EdgeCount
// 	);
// }
//
//
//
// [numthreads(1024, 1, 1)]
// void StampContourDetectPathLoops_Reduce(
// 	uint3 id : SV_DispatchThreadID,
// 	uint groupIdx : SV_GroupIndex,
// 	uint3 gIdx : SV_GroupID)
// {
// 	SegScanReduction_CircularResolve(
// 		CBuffer_BufferRawLookBacks,
// 		0, groupIdx
// 	);
// }
//
//
// #undef TID
// #define EdgeId (id.x)
//
// [numthreads(GROUP_SIZE_0, 1, 1)]
// void StampContourDetectPathLoops_DwSweep(
// 	uint3 id : SV_DispatchThreadID,
// 	uint groupIdx : SV_GroupIndex,
// 	uint3 gIdx : SV_GroupID)
// {
// 	const uint EdgeCount = CBuffer_CachedArgs_PixelEdgeCounter;
// 	// Why shifted?
// 	// edge-loops are shifted so that the start and end of edge-loop
// 	// matches the start and edge of path segments
// 	// uint edgeLoopShift = LoadPathRank(edgeLoopTailId) + 1;
// 	// 
// 	// Shifted seg-tail index. Seg data is accumulated in here.
// 	uint segTailScanItemId = CBuffer_BufferRawPixelEdgeData.Load(
// 		CBuffer_PixelEdgeData_SerializedAttribs_AddrAt(
// 			5, EdgeId
// 		)
// 	);
// 	uint gIdxScanItem = segTailScanItemId / GROUP_SIZE_0; // shifted block index
//
// 	float4 globalSum = SegScanDwSweep_CircularResolve(
// 		segTailScanItemId.xxx, gIdxScanItem.xxx,
// 		LS_SCAN_BUFFER,
// 		CBuffer_BufferRawLookBacks,
// 		0,0,
// 		EdgeCount
// 	);
//
//
// 	uint edgeAttrsRaw = CBuffer_BufferRawPixelEdgeData.Load(
// 		CBuffer_PixelEdgeData_SerializedAttribs_AddrAt(
// 			0, EdgeId)
// 	);
// 	bool edgeLoop = (
// 		1 == GetEdgeAttrib(
// 			BIT_BEG_LOOP_FLAG,
// 			BIT_LEN_LOOP_FLAG,
// 			edgeAttrsRaw
// 		)) && (EdgeId < EdgeCount);
// 	bool drawFlag = (
// 		1 == GetEdgeAttrib(
// 			BIT_BEG_DRAW_FLAG,
// 			BIT_LEN_DRAW_FLAG,
// 			edgeAttrsRaw
// 		)) && (EdgeId < EdgeCount);
//
// 	uint pathRank, pathLength;
// 	CBuffer_PixelEdgeData_EdgeParam_LoadAll(
// 		CBuffer_BufferRawPixelEdgeData,
// 		EDGE_PARAM_BRUSH_PATH,
// 		EdgeId,
// 		pathRank, pathLength
// 	);
//
// 	// Bisected path, mainly due to
// 	// path that occupies entire edge-loop
// 	uint2 bisectionRanks = (uint2)(.1f + globalSum.xz);
// 	float2 lowestHistRanks = globalSum.yw;
// 	
// 	bool2 pathBisected = bisectionRanks > min(32u, pathLength >> 1);
//
// 	if (EdgeId < EdgeCount)
// 	{
// 		bisectionRanks = pathBisected ? bisectionRanks : 0;
// 		CBuffer_BufferRawPixelEdgeData.Store(
// 			CBuffer_PixelEdgeData_PathRank_AddrAt(EdgeId),
// 			bisectionRanks.x
// 		);
// 		CBuffer_BufferRawPixelEdgeData.Store(
// 			CBuffer_PixelEdgeData_PathRankII_AddrAt(EdgeId),
// 			bisectionRanks.y
// 		);
// 	}
//
// 	
// #ifdef DEBUG_DWSWEEP
// 	uint edgeAttribsRaw =
// 		CBuffer_BufferRawPixelEdgeData.Load(
// 			CBuffer_PixelEdgeData_SerializedAttribs_AddrAt(0, EdgeId)
// 		);
// 	EdgeAttrib edgeAttribsMain = DecodeEdgeAttrib(edgeAttribsRaw);
// 	float2 stampCoord = (float2)
// 		DecodePixelCoord(CBuffer_BufferRawStampPixels.Load(
// 			CBuffer_BufferRawStampPixels_AddrAt(edgeAttribsMain.stampInfo))
// 		);
// 	float2 edgeCoord = stampCoord + MoveAtOppositeStamp(edgeAttribsMain.edgeDir);
//
// 	
// 	// if (_BeforeMerge == 1)
// 	if (EdgeId < EdgeCount)
// 	{
// 		float4 dbgCol = 
// 			float4(pathBisected.x, pathBisected.y, 0, pathRank);
// 		_DebugTexture[edgeCoord] = drawFlag ? dbgCol : 0;
//
// 		dbgCol = 
// 			float4(bisectionRanks.x, bisectionRanks.y, 0, pathRank);
// 		_DebugTexture1[edgeCoord] = drawFlag ? dbgCol : 0;
// 	}
// #endif
// }
//
//
//
