// Each #kernel tells which function to compile; you can have many kernels
// ReSharper disable All
#pragma kernel StampContourCoordSmoothing_CoordConvPass

#include "../ShaderLibrary/ComputeKernelConfigs/StampContourCoordSmoothingComputeDefs.hlsl"

// #define DEBUG_SMOOTHED_COORD

RWStructuredBuffer<uint> CBuffer_CachedArgs;
RWStructuredBuffer<uint> CBuffer_CachedArgs1;
// Debug -------------------------
RWTexture2D<float4> _DebugTexture;
RWTexture2D<float4> _DebugTexture1;
// -------------------------------

ByteAddressBuffer CBuffer_BufferRawStampPixels;
ByteAddressBuffer CBuffer_BufferRawStampGBuffer;
ByteAddressBuffer CBuffer_BufferRawStampLinkage;
// #define CONV_PATCH_BUFFER CBuffer_BufferRawRasterDataPerSeg

void StoreGlobalConvData(uint edgeId, T_CONV convRes)
{
	PING_PONG_BUFFER.Store(
		Conv_Buffer_ConvData_AddrAt((_PingPong + 1) % 2, edgeId),
		PackUnitVector_2D(convRes)
	);
}

#define COORD_CONV_RADIUS 16

static float CoordSmoothingKernel[1 + COORD_CONV_RADIUS] = {
	// http://dev.theomader.com/gaussian-kernel-calculator/
	// Sigma == 5, Kernel Size == 33
	.079733, 0.078159, 0.073622, 0.066638, 0.05796, 0.048441, 0.038903, 0.030022, 0.022263,
	0.015864, 0.010863, 0.007147, 0.004519, 0.002745, 0.001603, 0.000899, 0.000485
	// 0.078743, 0.07766, 0.074497, 0.069511, 0.063085, 0.055688, 0.047815, 0.039933, 0.032439
};


void CoordConvolution(
	uint d, T_CONV data,
	inout T_CONV edgeCoord)
{
	edgeCoord += (CoordSmoothingKernel[d] * data.xy);
}


void StoreSmoothedEdgeCoord(uint edgeId, T_CONV smoothedCoord)
{
	smoothedCoord = (_ScreenParams.zw - 1.0f) * smoothedCoord;
	PING_PONG_BUFFER.Store(
		Conv_Buffer_ConvData_AddrAt(
			3 + (_PingPong % 2), 
			edgeId
		),
		PackR16G16(saturate(smoothedCoord))
	);
}



#define EdgeId ((id.x))
[numthreads(GROUP_SIZE_CONV, 1, 1)]
void StampContourCoordSmoothing_CoordConvPass(
	uint3 id : SV_DispatchThreadID,
	uint groupIdx : SV_GroupIndex,
	uint3 gIdx : SV_GroupID)
{
	const uint EdgeCount = CBuffer_CachedArgs_PixelEdgeCounter;

	EdgeLoopTopology edgeloop = FetchEdgeLoopTopology(
		false, CBuffer_BufferRawStampLinkage, 
		EdgeId
	);

	float2 convData;
	SetupSegmentedConvolution_SmoothCoord(
		gIdx, groupIdx, EdgeCount,
		/*out*/convData
	);

	// Step 4. Apply actual convolution iterations
	convData *= CoordSmoothingKernel[0];

	for (uint d = 1; d <= COORD_CONV_RADIUS; ++d)
	{
		T_CONV dataNeigh;
		dataNeigh = LoadLDSConvData_AtLeft_SmoothCoord(
			d, gIdx.x, groupIdx,
			edgeloop.length,
			edgeloop.headEdgeId
		);
		CoordConvolution(d, dataNeigh, convData/*inout*/);

		dataNeigh = LoadLDSConvData_AtRight_SmoothCoord(
			d, gIdx.x, groupIdx,
			edgeloop.length,
			edgeloop.headEdgeId
		);
		CoordConvolution(d, dataNeigh, convData/*inout*/);
	}
	

	if (EdgeId < EdgeCount)
	{
		StoreSmoothedEdgeCoord(EdgeId, convData);

#ifdef DEBUG_SMOOTHED_COORD
		uint edgeAttribs = CBuffer_BufferRawPixelEdgeData.Load(
			CBuffer_PixelEdgeData_SerializedAttribs_AddrAt(0, EdgeId)
		);
		EdgeAttrib edgeAttribsMain = DecodeEdgeAttrib(edgeAttribs);

		float2 stampCoord = (float2)
			DecodePixelCoord(CBuffer_BufferRawStampPixels.Load(
				CBuffer_BufferRawStampPixels_AddrAt(edgeAttribsMain.stampInfo)));

		float2 edgeCoord = stampCoord + MoveAtOppositeStamp(edgeAttribsMain.edgeDir);

		_DebugTexture[(int2)convData] =
			float4(edgeCoord.xy, ((float)_PingPong + 1.0) * 0.25f, 1);
#endif
	}
}

#undef EdgeId






